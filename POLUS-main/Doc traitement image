
RGB_CSV(self, fichier_csv)
Lit le fichier CSV contenant le RGB de tous les crayons disponibles
Args:
    fichier_csv: nom du fichier CSV contenant le RGB des crayons disponibles
 
Returns:
    liste_crayons_dispos: liste des RGB des crayons disponibles
__init__(self)
Initialise l'objet de type traitement_image lorsqu'il est créé
 
Args:
    aucun: utilise simplement les informations fournies dans l'objet 
 
Returns:
    void : ne fait qu'initialiser l'objet de type traitement_image
calcul_coordonnées_carrés(self, nb_carrés)
Calcule les coordonnées x,y du centre de chaque carré de l'image pixélisée
    Les coordonnées x,y sont faites à partir du coin supérieur gauche.
 
Args:
    nb_carrés: nombre de carrés (gros pixels) de pour chaque côté de l'image de sortie
 
Returns:
    coordonnées_carrés: liste des coordonnées de tous les carrés de l'image
get_RGB_carrés(self, nom_fichier_image_pixélisée, nb_carrés)
Reçoit une image pixélisée et crée un tableau contenant le RGB de chaque pixel
Args:
    nb_carrés: nombre de carrés (gros pixels) de pour chaque côté de l'image de sortie
    nom_fichier_image_pixélisée: nom du fichier de l'image pixélisée
    
Returns:
    liste_rgb_carrés_og: liste du RGB de chaque carré de l'image pixélisée
get_closest_RGB(self, liste_rgb_carrés_og, liste_crayons_dispos)
Compare le RGB de chaque carré aux crayons disponibles dans le CSV et garde pour chaque RGB celui qui est le plus proche
Args:
    liste_rgb_carrés_og: liste du RGB de chaque carré de l'image pixélisée
    liste_crayons_dispos: liste des crayons disponibles pour le robot, provient du CSV "RGB_48.csv"
 
Returns:
    liste_rgb_carrés_crayola: liste du RGB de chaque carré de l'image de sortie
pixeliser_image(self, nom_fichier_image_og, nb_carrés, nom_fichier_image_pixélisée)
Reçoit une image et la sépare en carrés pour faire un effet pixélisé
Args: 
    nom_fichier_image_og: nom du fichier de l'image d'origine qui sera traitée pour être pixélisée
    nb_carrés: nombre de carrés (gros pixels) de pour chaque côté de l'image de sortie
    nom_fichier_image_pixélisée: nom du fichier de l'image pixélisée
 
Returns:
send_positions(self, index_crayon_carrousel, liste_rgb_carrés_crayola, liste_crayons_dispos, coordonnées_carrés)
Crée une liste des coordonnées des carrés pour le crayon demandé
 
Args:
    index_crayon_carrousel: numéro du crayon dans le carrousel (0 à 19)
    liste_rgb_carrés_crayola: liste du RGB de chaque carré de l'image de sortie
    liste_crayons_dispos: liste des RGB des crayons disponibles
    coordonnées_carrés: liste des coordonnées de tous les carrés de l'image
 
Returns:
    liste_coordonnées: liste des coordonnées des carrés pour la couleur demandée
visualiser_resultat(self, liste_rgb_carrés_crayola, nb_carrés, nom_fichier_image_sortie)
Trace le résultat attendu en changeant chaque pixel de chaque carré de l'image pixélisée pour le RGB disponible le plus proche
Args:
    liste_rgb_carrés_crayola: liste du RGB de chaque carré de l'image de sortie
    nb_carrés: nombre de carrés (gros pixels) de pour chaque côté de l'image de sortie
    image_sortie: nom du fichier de l'image pixélisée faite avec les couleurs de crayons disponibles (résultat attendu tracé par le robot)
 
Returns:
